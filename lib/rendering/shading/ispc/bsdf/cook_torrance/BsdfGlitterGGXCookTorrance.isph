// Copyright 2023 DreamWorks Animation LLC
// SPDX-License-Identifier: Apache-2.0

/// @file BsdfGlitterGGXCookTorrance.isph
#pragma once
#include "BsdfCookTorrance.isph"
#include <moonray/rendering/shading/ispc/bsdf/BsdfUtil.isph>
#include <moonray/rendering/shading/ispc/ShaderMacros.isph>

/// @class GlitterGGXCookTorranceBsdfLobe BsdfCookTorrance.isph <rendering/shading/bsdf/BsdfCookTorrance.isph>
/// @brief The Cook-Torrance bsdf using GGX Distribution, specialized to handled
/// perturbed normals used for large glitter flakes.
///
/// Note: The main modification in this lobe is that when the flake normal is too
/// perturbed to have wo and wi within the shading hemisphere (wrt to surface normal),
/// sampling/evaluation is done using the surface shading normal instead. This is a
/// hack to prevent occurence of black flakes but allow high variation in the flake normals
///
struct GlitterGGXCookTorranceBsdfLobe
{
    COOK_TORRANCE_LOBE_BASE;
    Vec3f mFlakeNormal;
};

/// @brief evaluate a ggx cook torrance lobe
varying Color
GlitterGGXCookTorranceBsdfLobe_eval(const varying BsdfLobe * uniform lobe,
                                    const varying BsdfSlice &slice,
                                    const Vec3f &wi,
                                    varying float * uniform pdf);

/// @brief getProperty function
uniform bool
GlitterGGXCookTorranceBsdfLobe_getProperty(const varying BsdfLobe * uniform lobe,
                                           uniform BsdfLobeProperty property,
                                           varying float * uniform dest);

/// @brief sample a ggx cook torrance lobe
varying Color
GlitterGGXCookTorranceBsdfLobe_sample(const varying BsdfLobe * uniform lobe,
                                      const varying BsdfSlice &slice,
                                      varying float r1, varying float r2,
                                      varying Vec3f &wi, varying float &pdf);

inline void
GlitterGGXCookTorranceBsdfLobe_show(const varying BsdfLobe * const uniform lobe,
                                    const uniform uint8_t ntab)
{
    const varying GlitterGGXCookTorranceBsdfLobe * uniform me =
        (const varying GlitterGGXCookTorranceBsdfLobe * uniform) lobe;

    const varying Vec3f N = getN(me->mFrame);
    const varying Fresnel * const uniform fresnel = me->mFresnel;

    BsdfUtil_indent(ntab);   print("[GlitterGGXCookTorranceBsdfLobe] mask: %\n", lobe->mMask);

    BsdfUtil_indent(ntab+1); print("scale: % % %\n", BSDF_UTIL_EXTRACT(me->mScale.r),
                                                     BSDF_UTIL_EXTRACT(me->mScale.g),
                                                     BSDF_UTIL_EXTRACT(me->mScale.b));
    BsdfUtil_indent(ntab+1); print("N: % % %\n", BSDF_UTIL_EXTRACT(N.x),
                                                 BSDF_UTIL_EXTRACT(N.y),
                                                 BSDF_UTIL_EXTRACT(N.z));
    if (fresnel) {
        Fresnel_show(fresnel, ntab+1);
    }
}

/// @brief initialize an ggx cook torrance lobe
inline void
GlitterGGXCookTorranceBsdfLobe_init(varying GlitterGGXCookTorranceBsdfLobe * uniform lobe,
                                    const varying Vec3f &normal,
                                    const varying Vec3f &flakeNormal,
                                    const varying float roughness,
                                    const varying Color& favg)
{
    // TODO: Should use CookTorranceBsdfLobe_init() ?
    BsdfLobe_init((varying BsdfLobe * uniform) lobe,
                  /* name = */ BSDF_LOBE_GLITTER_GGX_COOK_TORRANCE,
                  /* type = */ BSDF_LOBE_TYPE_REFLECTION | BSDF_LOBE_TYPE_GLOSSY,
                  /* differentialFlags = */ (uniform BsdfLobeDifferentialFlags)0,
                  /* isSpherical = */ false,
                  /* propertyFlags = */ BSDF_LOBE_PROPERTY_NORMAL | BSDF_LOBE_PROPERTY_ROUGHNESS,
                  /* evalFn = */ GlitterGGXCookTorranceBsdfLobe_eval,
                  /* sampleFn = */ GlitterGGXCookTorranceBsdfLobe_sample,
                  /* albedoFn = */ CookTorranceBsdfLobe_albedo,                 // Fallback to CookTorranceBsdfLobe.
                  /* differentialsFn = */ CookTorranceBsdfLobe_differentials,   // Fallback to CookTorranceBsdfLobe.
                  /* getPropertyFn = */ GlitterGGXCookTorranceBsdfLobe_getProperty,
                  /* showFn = */ GlitterGGXCookTorranceBsdfLobe_show);

    ReferenceFrame_init(lobe->mFrame, normal);
    lobe->mFlakeNormal = flakeNormal;

    lobe->mInputRoughness = roughness;

    lobe->mFavg = favg;
    lobe->mFavgInv = sBlack;

    // Apply roughness squaring to linearize roughness response
    // See "Physically-Based Shading at Disney" Siggraph course notes.
    lobe->mRoughness = lobe->mInputRoughness * lobe->mInputRoughness;

    // TODO: Smaller thresholds trigger nans
    lobe->mRoughness = max(0.001f, lobe->mRoughness);

    // Use a directional differential scale that varies with roughness
    lobe->mdDFactor = CookTorrance_sdDFactorMin + lobe->mRoughness * CookTorrance_sdDFactorSlope;
}

