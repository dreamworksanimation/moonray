// Copyright 2023-2024 DreamWorks Animation LLC
// SPDX-License-Identifier: Apache-2.0

/// @file State.isph

#pragma once

#include <moonray/rendering/bvh/shading/ispc/Intersection.isph>
#include <scene_rdl2/common/platform/Platform.isph>

struct Arena;
struct TextureSystem;
struct TextureHandle;


// "typedef Intersection State;" doesn't work so we declare the State
// structure as its own identical copy and asAState convenience functions
// for the renderer to use

/// @class State Shading.isph <shading/Shading.isph>
/// @brief Shading state P, N, etc... needed by shaders
/// TODO: move to "internal" directory and provide getter functions
///       for everything?
struct State
{
    INTERSECTION_MEMBERS;
};

DEFINE_BASIC_INTERSECTION_STATE_INTERFACE(State)

inline const varying State &
asAState(const varying Intersection &isect)
{
    return *((const varying State * uniform)&isect);
}

inline varying State &
asAState(varying Intersection &isect)
{
    return *((varying State * uniform)&isect);
}

inline const varying Intersection &
asAnIntersection(const varying State &state)
{
    return *((const varying Intersection * uniform)&state);
}

inline varying Intersection &
asAnIntersection(varying State &state)
{
    return *((varying Intersection * uniform)&state);
}

//---------------------------------------------------------------------------

inline varying bool
blendMips(const varying State &me)
{
    PathType pathType = getPathType(me);
    return pathType != PATH_TYPE_INDIRECT_DIFFUSE;
}

inline varying bool
isHifi(const varying State &me)
{
    return isHifi(asAnIntersection(me));
}

inline varying float getMediumIor(const varying State &me)
{
    // TODO - revist once overlapping dielectrics is in vector mode
    // MOONRAY-3083 Medium IOR is not Implementented in Vector Mode Yet
    return 1.f;
}

/// Normal derivatives
inline varying Vec3f
getdNdx(const varying State &me)
{
    return getdNdx(asAnIntersection(me));
}

inline varying Vec3f
getdNdy(const varying State &me)
{
    return getdNdy(asAnIntersection(me));
}

/// Whether the primitive attribute with specified key is provided in this State
varying bool isProvided(const varying State &me, const varying int key);

/// Whether the primitive attribute ds derivative with specified key
/// is provided in this State
varying bool isdsProvided(const varying State &me, const varying int key);

/// Whether the primitive attribute dt derivative with specified key
/// is provided in this State
varying bool isdtProvided(const varying State &me, const varying int key);

///
/// Other convenience derivatives
///

inline varying Vec3f
getdPdx(const varying State &me)
{
    return me.mdPds * me.mdSdx + me.mdPdt * me.mdTdx;
}

inline varying Vec3f
getdPdy(const varying State &me)
{
    return me.mdPds * me.mdSdy + me.mdPdt * me.mdTdy;
}

inline varying Vec3f
getdPdz(const varying State &me)
{
    return Vec3f_ctor(0.f);
}

// Extract a uniform Intersection from a varying State
inline uniform Intersection
extract(const varying State &vState,
        uniform int lane)
{
    uniform Intersection uIntersection;

    uIntersection.mGeometryObject.mLow = extract(vState.mGeometryObject.mLow, lane);
    uIntersection.mGeometryObject.mHigh = extract(vState.mGeometryObject.mHigh, lane);

    uIntersection.mMaterial.mLow = extract(vState.mMaterial.mLow, lane);
    uIntersection.mMaterial.mHigh = extract(vState.mMaterial.mHigh, lane);

    uIntersection.mTable.mLow = extract(vState.mTable.mLow, lane);
    uIntersection.mTable.mHigh = extract(vState.mTable.mHigh, lane);

    uIntersection.mData.mLow = extract(vState.mData.mLow, lane);
    uIntersection.mData.mHigh = extract(vState.mData.mHigh, lane);
    uIntersection.mValidTableOffset = extract(vState.mValidTableOffset, lane);
    uIntersection.mNumKeys = extract(vState.mNumKeys, lane);

    uIntersection.mLayerAssignmentId = extract(vState.mLayerAssignmentId, lane);

    uIntersection.mId1 = extract(vState.mId1, lane);
    uIntersection.mId2 = extract(vState.mId2, lane);
    uIntersection.mId3 = extract(vState.mId3, lane);

    uIntersection.mSt.x = extract(vState.mSt.x, lane);
    uIntersection.mSt.y = extract(vState.mSt.y, lane);

    uIntersection.mP.x = extract(vState.mP.x, lane);
    uIntersection.mP.y = extract(vState.mP.y, lane);
    uIntersection.mP.z = extract(vState.mP.z, lane);

    uIntersection.mNg.x = extract(vState.mNg.x, lane);
    uIntersection.mNg.y = extract(vState.mNg.y, lane);
    uIntersection.mNg.z = extract(vState.mNg.z, lane);

    uIntersection.mN.x = extract(vState.mN.x, lane);
    uIntersection.mN.y = extract(vState.mN.y, lane);
    uIntersection.mN.z = extract(vState.mN.z, lane);

    uIntersection.mdPds.x = extract(vState.mdPds.x, lane);
    uIntersection.mdPds.y = extract(vState.mdPds.y, lane);
    uIntersection.mdPds.z = extract(vState.mdPds.z, lane);

    uIntersection.mdPdt.x = extract(vState.mdPdt.x, lane);
    uIntersection.mdPdt.y = extract(vState.mdPdt.y, lane);
    uIntersection.mdPdt.z = extract(vState.mdPdt.z, lane);

    uIntersection.mEpsilonHint = extract(vState.mEpsilonHint, lane);

    uIntersection.mShadowEpsilonHint = extract(vState.mShadowEpsilonHint, lane);

    uIntersection.mFlags.mBits = extract(vState.mFlags.mBits, lane);

    uIntersection.mdSdx = extract(vState.mdSdx, lane);
    uIntersection.mdTdx = extract(vState.mdTdx, lane);
    uIntersection.mdSdy = extract(vState.mdSdy, lane);
    uIntersection.mdTdy = extract(vState.mdTdy, lane);

    uIntersection.mdNds.x = extract(vState.mdNds.x, lane);
    uIntersection.mdNds.y = extract(vState.mdNds.y, lane);
    uIntersection.mdNds.z = extract(vState.mdNds.z, lane);

    uIntersection.mdNdt.x = extract(vState.mdNdt.x, lane);
    uIntersection.mdNdt.y = extract(vState.mdNdt.y, lane);
    uIntersection.mdNdt.z = extract(vState.mdNdt.z, lane);

    uIntersection.mMinRoughness.x = extract(vState.mMinRoughness.x, lane);
    uIntersection.mMinRoughness.y = extract(vState.mMinRoughness.y, lane);

    uIntersection.mMediumIor = extract(vState.mMediumIor, lane);

    uIntersection.mWo.x = extract(vState.mWo.x, lane);
    uIntersection.mWo.y = extract(vState.mWo.y, lane);
    uIntersection.mWo.z = extract(vState.mWo.z, lane);

    uIntersection.mIdLo = extract(vState.mIdLo, lane);
    uIntersection.mIdHi = extract(vState.mIdHi, lane);

    return uIntersection;
}
